{"version":3,"sources":["Components/Balance/Balance.module.css","Components/Dashboard.module.css","Components/Utils/transactionType.jsx","Components/Controls/Controls.jsx","Components/Balance/Balance.jsx","Components/Dashboard.jsx","index.js"],"names":["module","exports","transactionType","deposit","withdraw","Controls","transaction","addTransaction","handleSubmitTransaction","className","type","name","value","onChange","onClick","Balance","allDeposits","allWithdraws","balance","styles","Dashboard","state","transactions","e","setState","target","addToLocalStorage","localStorage","setItem","JSON","stringify","notify","notice","toast","preventDefault","date","Date","options","year","month","timezone","hour","minute","second","newTransaction","id","shortid","generate","amount","toLocaleString","prevState","Number","history","getItem","historyUnparsed","parse","this","column","map","row","key","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0d8a084.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"balance\":\"Balance_balance__16211\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"history\":\"Dashboard_history__3JJZa\",\"column\":\"Dashboard_column__19_fj\",\"row\":\"Dashboard_row__1pM3o\"};","const transactionType = {\n  deposit: 'Deposit',\n  withdraw: 'Withdraw',\n};\n\nexport default transactionType;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport transactionType from '../Utils/transactionType';\nimport styles from './Controls.module.css';\n\nconst Controls = ({ transaction, addTransaction, handleSubmitTransaction }) => (\n  <section className=\"controls\">\n    <input\n      type=\"number\"\n      name=\"transaction\"\n      value={transaction}\n      onChange={addTransaction}\n    />\n    <button\n      type=\"button\"\n      onClick={handleSubmitTransaction}\n      name={transactionType.deposit}\n    >\n      Deposit\n    </button>\n    <button\n      type=\"button\"\n      onClick={handleSubmitTransaction}\n      name={transactionType.withdraw}\n    >\n      Withdraw\n    </button>\n  </section>\n);\n\nControls.propTypes = {\n  transaction: PropTypes.string.isRequired,\n  addTransaction: PropTypes.func.isRequired,\n  handleSubmitTransaction: PropTypes.func.isRequired,\n};\n\nexport default Controls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Balance.module.css';\n\nconst Balance = ({ allDeposits, allWithdraws, balance }) => (\n  <section className={styles.balance}>\n    <span>⬆️{allDeposits} $</span>\n    <span>⬇️{allWithdraws} $</span>\n    <span>Balance: {balance} $</span>\n  </section>\n);\n\nBalance.propTypes = {\n  allDeposits: PropTypes.number.isRequired,\n  allWithdraws: PropTypes.number.isRequired,\n  balance: PropTypes.number.isRequired,\n};\n\nexport default Balance;\n","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport { ToastContainer, toast } from 'react-toastify';\nimport Controls from './Controls/Controls';\nimport Balance from './Balance/Balance';\nimport 'react-toastify/dist/ReactToastify.css';\nimport styles from './Dashboard.module.css';\n\nexport default class Dashboard extends Component {\n  state = {\n    transactions: [],\n    transaction: '',\n    balance: 0,\n    allDeposits: 0,\n    allWithdraws: 0,\n  };\n\n  componentDidMount() {\n    const history = localStorage.getItem('history');\n    const historyUnparsed = JSON.parse(history);\n    if (history) {\n      this.setState({ ...historyUnparsed });\n    }\n  }\n\n  addTransaction = e => {\n    this.setState({ transaction: e.target.value });\n  };\n\n  addToLocalStorage = () =>\n    localStorage.setItem('history', JSON.stringify(this.state));\n\n  notify = notice => toast(notice);\n\n  handleSubmitTransaction = e => {\n    e.preventDefault();\n    const date = new Date();\n\n    const options = {\n      year: 'numeric',\n      month: 'long',\n      timezone: 'UTC',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric',\n    };\n    if (e.target.name === 'Deposit' && this.state.transaction > 0) {\n      const newTransaction = {\n        id: shortid.generate(),\n        amount: this.state.transaction,\n        type: e.target.name,\n        date: date.toLocaleString('en', options),\n      };\n      this.setState(\n        prevState => ({\n          transactions: [...prevState.transactions, newTransaction],\n          balance: prevState.balance + Number(newTransaction.amount),\n          allDeposits: prevState.allDeposits + Number(newTransaction.amount),\n          transaction: '',\n        }),\n        () => this.addToLocalStorage(),\n      );\n    } else if (this.state.transaction === '0') {\n      this.notify('Введите сумму для проведения операции!');\n    }\n\n    if (\n      e.target.name === 'Withdraw' &&\n      this.state.balance >= this.state.transaction &&\n      this.state.transaction > 0\n    ) {\n      const newTransaction = {\n        id: shortid.generate(),\n        amount: this.state.transaction,\n        type: e.target.name,\n        date: date.toLocaleString('en', options),\n      };\n      this.setState(\n        prevState => ({\n          transactions: [...prevState.transactions, newTransaction],\n          balance: prevState.balance - Number(newTransaction.amount),\n          allWithdraws: prevState.allWithdraws + Number(newTransaction.amount),\n          transaction: '',\n        }),\n        () => this.addToLocalStorage(),\n      );\n    } else if (\n      e.target.name === 'Withdraw' &&\n      this.state.balance <= this.state.transaction\n    ) {\n      this.notify('На счету недостаточно средств для проведения операции!');\n    }\n    // setTimeout(localStorage.setItem('history', JSON.stringify(this.state)), 2);\n  };\n\n  render() {\n    const { transaction, allDeposits, allWithdraws, balance } = this.state;\n    return (\n      <div className=\"dashboard\">\n        <Controls\n          transaction={transaction}\n          addTransaction={this.addTransaction}\n          handleSubmitTransaction={this.handleSubmitTransaction}\n        />\n        <Balance\n          allDeposits={allDeposits}\n          allWithdraws={allWithdraws}\n          balance={balance}\n        />\n\n        <ToastContainer />\n\n        <table className={styles.history}>\n          <thead>\n            <tr>\n              <th className={styles.column}>Transaction</th>\n              <th className={styles.column}>Amount</th>\n              <th className={styles.column}>Date</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.transactions.map(transaction => (\n              <tr className={styles.row} key={transaction.id}>\n                <td>{transaction.type}</td>\n                <td>{transaction.amount}$</td>\n                <td>{transaction.date}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Dashboard from './Components/Dashboard';\n\nReactDOM.render(<Dashboard />, document.getElementById('root'));\n"],"sourceRoot":""}